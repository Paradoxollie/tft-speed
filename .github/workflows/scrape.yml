name: TFT Meta Scraper

on:
  # D√©clenche le workflow toutes les 12 heures
  schedule:
    - cron: '0 */12 * * *'  # √Ä 00:00 et 12:00 UTC tous les jours
  
  # Permet l'ex√©cution manuelle depuis l'interface GitHub
  workflow_dispatch:
  
  # D√©clenche aussi sur push pour les tests
  push:
    branches: [ main, master ]
    paths: 
      - 'backend-scraper/**'
      - '.github/workflows/scrape.yml'

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    
    permissions:
      # Permissions n√©cessaires pour commit et push
      contents: write
      actions: read
    
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4
        with:
          # N√©cessaire pour pouvoir push les changements
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend-scraper/package-lock.json'
      
      - name: üì¶ Install dependencies
        working-directory: ./backend-scraper
        run: npm ci
      
      - name: üîß Build TypeScript
        working-directory: ./backend-scraper
        run: npm run build
      
      - name: üï∑Ô∏è Run TFT Meta Scraper
        working-directory: ./backend-scraper
        run: npm start
        env:
          # Variables d'environnement pour Puppeteer en CI
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: false
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
      
      - name: üìä Verify meta.json was generated
        working-directory: ./backend-scraper
        run: |
          if [ -f "public/meta.json" ]; then
            echo "‚úÖ meta.json generated successfully"
            echo "File size: $(du -h public/meta.json | cut -f1)"
            echo "Compositions count: $(jq '.totalCompositions' public/meta.json)"
            echo "Last updated: $(jq -r '.lastUpdated' public/meta.json)"
          else
            echo "‚ùå meta.json not found"
            exit 1
          fi
      
      - name: üìù Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected in meta.json"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes detected"
          fi
      
      - name: üì§ Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          # Configuration Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ajout et commit des changements
          git add backend-scraper/public/meta.json
          
          # Cr√©er un message de commit informatif
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMPOSITIONS_COUNT=$(jq '.totalCompositions' backend-scraper/public/meta.json)
          
          git commit -m "ü§ñ Auto-update TFT meta data
          
          - Updated: $TIMESTAMP
          - Compositions: $COMPOSITIONS_COUNT
          - Source: Automated scraping workflow
          
          [skip ci]"
          
          # Push vers le repository
          git push
      
      - name: üìà Upload meta.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tft-meta-data-${{ github.run_number }}
          path: backend-scraper/public/meta.json
          retention-days: 30
      
      - name: üí¨ Comment on success (if manual trigger)
        if: github.event_name == 'workflow_dispatch' && steps.verify-changed-files.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const metaData = JSON.parse(fs.readFileSync('backend-scraper/public/meta.json', 'utf8'));
            
            const comment = `## üéÆ TFT Meta Update Complete!
            
            **üìä Summary:**
            - **Total Compositions:** ${metaData.totalCompositions}
            - **Last Updated:** ${metaData.lastUpdated}
            - **Patch Version:** ${metaData.metadata.patchVersion || 'N/A'}
            - **Data Source:** ${metaData.metadata.scrapedFrom}
            
            **üéØ Top Compositions:**
            ${metaData.compositions.slice(0, 3).map((comp, i) => 
              `${i + 1}. **${comp.name}** (Tier ${comp.tier}) - ${comp.winRate || 'N/A'}% WR`
            ).join('\n')}
            
            The updated \`meta.json\` file has been committed to the repository.`;
            
            // Si c'est un d√©clenchement manuel, on peut cr√©er une issue ou commenter
            console.log(comment);
      
      - name: üö® Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('‚ùå TFT Meta Scraper workflow failed');
            console.log('Check the logs for more details.');
            
            // Ici on pourrait envoyer une notification Slack, Discord, etc.
            // ou cr√©er une issue GitHub pour signaler l'√©chec 

interface Recommendation {
  composition: Composition;
  matchScore: number;
  competitionScore: number;
  finalScore: number;
  priorityChampions: Array<{
    name: string;
    priority: number;  // 1-5
    reason: string;    // Explication
  }>;
} 

const recommendations = await window.tftAPI.getRecommendations(gameState);

// Pour chaque recommandation
recommendations.forEach(rec => {
  console.log(`Composition: ${rec.composition.name}`);
  console.log(`Score de match: ${rec.matchScore}%`);
  console.log(`Score de concurrence: ${rec.competitionScore}%`);
  console.log(`Score final: ${rec.finalScore}%`);
  
  // Champions prioritaires
  rec.priorityChampions.forEach(champ => {
    console.log(`${champ.name} (Priorit√© ${champ.priority}): ${champ.reason}`);
  });
}); 

publish:
  provider: github
  owner: VOTRE_NOM_UTILISATEUR
  repo: tft-overlay 